require('dotenv').config();
const { Telegraf } = require('telegraf');
const { AddUser } = require('./controllers/addUser');
const { GPTController } = require('./controllers/gptController');
const { UpdateStateSession } = require('./controllers/updateStateSessionController');
const { GetInvoice } = require('./controllers/getInvoiceController');
const { CheckSubscriptions } = require('./controllers/checkSubscriptionsController');
const { AbilityReceiveAnswer } = require('./controllers/abilityReceiveAnswerController')
const { SubInlineBtn } = require('./componets/subInlineBtn');
const moment = require('moment');
const conn = require('./db').promise();

const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

const bot = new Telegraf(process.env.BOT_TOKEN);

// inline –∫–Ω–æ–ø–∫–∏ 
const inlineBtn = {
    reply_markup: {
        inline_keyboard: [
            [ 
                { text: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤", callback_data: "add_comment" }, 
                { text: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data: "add_description" } 
            ],
        ]
    }
}

async function addDescription(ctx) {
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await UpdateStateSession(ctx, 1);
    await ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤')
}
async function addComment(ctx) {
    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await UpdateStateSession(ctx, 2);
    await ctx.reply('–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞');
    await GPTAnswer(ctx)
}
async function GPTAnswer(ctx) {
    // –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
    const [comment] = await conn.execute('SELECT `body` FROM `messages` WHERE user_id = ? AND type = 1 ORDER BY id DESC LIMIT 1', [ctx.from.id]);
    const [description] = await conn.execute('SELECT `body` FROM `messages` WHERE user_id = ? AND type = 0 ORDER BY id DESC LIMIT 1', [ctx.from.id]);
    // –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç gpt

    // console.log(`${description[0].body}
    // \n${process.env.DESCRIPTION_REQUEST_GPT}
    // \n${comment[0].body}`)


    const [userInfo] = await conn.execute('SELECT * FROM `users` WHERE `user_id`=?', [ctx.from.id]);
    const subInlineBtn = await SubInlineBtn(userInfo);
    const abilityReceive = await AbilityReceiveAnswer(ctx);

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if (abilityReceive) {
        const GPTtext = await GPTController(`${description[0].body} ${comment[0].body} ${process.env.DESCRIPTION_REQUEST_GPT} `)

        // –¥–æ–±–∞–≤—è–ª–µ–º –æ—Ç–≤–µ—Ç gpt –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
        await conn.execute('INSERT INTO `messages`(`user_id`, `type`, `body`) VALUES(?, ?, ?)', [
            ctx.from.id,
            2,
            GPTtext
        ]);
        
        ctx.reply(GPTtext, inlineBtn);
    } else {
        ctx.replyWithHTML('<b>–ü–æ–¥–ø–∏—Å–∫–∞ RatingRanger</b>\n\n<b>‚Ä¢</b> –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ–≤—Ç–æ –∑–∞–ø—Ä—Å–æ–≤\n<b>‚Ä¢</b> –ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Ö–ø–æ–¥–µ—Ä–∂–∫–æ–π\n\n<b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</b>', subInlineBtn); 
    }   
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUserMessage(ctx) {    
    // –Ω–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [currentSession] = await conn.execute('SELECT `stateSession` FROM `users` WHERE user_id=?', [ctx.from.id])
    // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    await conn.execute('INSERT INTO `messages`(`user_id`, `type`, `body`) VALUES(?, ?, ?)', [
        ctx.from.id,
        currentSession[0].stateSession,
        ctx.message.text
    ]);

    if (currentSession[0].stateSession == 0) {
        await addDescription(ctx);
    } else if (currentSession[0].stateSession == 1) {
        await addComment(ctx);
    }
}

bot.command('start', async (ctx) => {
    // —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AddUser(ctx); 
    // –æ–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await UpdateStateSession(ctx, 0)
    await ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏');
});

// –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
bot.command('subscription', async (ctx) => {
    const userSubIfo = await CheckSubscriptions(ctx.from.id);
    const subInlineBtn = await SubInlineBtn(userSubIfo.infoUser)
    
    if (userSubIfo.subscription) {
        ctx.replyWithHTML(`<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${ moment(userSubIfo.infoUser[0].end_data).format('DD.MM.YYYY')}`)
    } else {
        ctx.replyWithHTML('<b>–ü–æ–¥–ø–∏—Å–∫–∞ RatingRanger</b>\n\n<b>‚Ä¢</b> –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ–≤—Ç–æ –∑–∞–ø—Ä—Å–æ–≤\n<b>‚Ä¢</b> –ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Ö–ø–æ–¥–µ—Ä–∂–∫–æ–π\n\n<b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</b>', subInlineBtn); 
    }
});

// –≤—ã–≤–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
bot.command('referral', async (ctx) => {
    const refelarLink = `https://t.me/${bot.options.username}?start=${ctx.from.id}`
    ctx.reply(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n${refelarLink}`)
});
// –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–∏–∑–∏
bot.command('support', async (ctx) => {
    ctx.reply(`
üöÄ–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

telegram: ${process.env.TELEGRAM}
`)
});

bot.command('instruction', async (ctx) => {
    ctx.replyWithHTML(`
‚ö°Ô∏è<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–µ</b>, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –æ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. 

1. <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.</b> –ß–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –æ –¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ. 
2. <b>–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. 

–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ 
`)
});

// –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–∞—Ä–≤–∞ –∞–¥–º–∏–Ω–∞
async function checkAdmin(user_id) {
    const [adminInDb] = await conn.execute('SELECT `nickname` FROM `users` WHERE `user_id` = ?', [user_id]);
    console.log(adminInDb[0].nickname, process.env.ADMIN_USERS)
    if (adminInDb[0].nickname == process.env.ADMIN_USERS) {
        return true;
    } else {
        return false;
    }
}
bot.command('getusers', async (ctx) => {
    if (await checkAdmin(ctx.from.id)) {
        const [users] = await conn.execute('SELECT * FROM `users`');
        const userList = users.map(item => `<b>user_id:</b> ${item.user_id}  <b>nickname:</b> ${item.nickname}`).join('\n');
        ctx.replyWithHTML(userList);
    }
});

bot.command('countusers', async (ctx) => {
    if (await checkAdmin(ctx.from.id)) {
        const [users] = await conn.execute('SELECT * FROM `users`');
        ctx.replyWithHTML(users.length);
    }
})

bot.command('getmessages', async (ctx) => {
    if (await checkAdmin(ctx.from.id)) {
        const userId = Number(ctx.message.text.split(' ')[1]);
        if (userId) {
            const [messages] = await conn.execute('SELECT * FROM `messages` WHERE `user_id` = ?', [userId]);
            const userList = messages.map(item => `${item.type === 0 ? '<b>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b>' : item.type === 1 ? '<b>–æ–ø–∏—Å–∞–Ω–∏–µ: </b>' : '<b>–æ—Ç–≤–µ—Ç gpt: </b>'} ${item.body}`).join('\n\n');
            ctx.replyWithHTML(userList);
        }
    }
})

// –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
bot.on('pre_checkout_query', (ctx) => ctx.answerPreCheckoutQuery(true)) // –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ
bot.on('successful_payment', async (ctx, next) => { // –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã 
    // –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞  
    try {
        // –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        const startDate = await moment().format('YYYY-MM-DD');
        // –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const [endDate] = await conn.execute('SELECT `selected_date` FROM `users` WHERE `user_id`=?' ,[ctx.from.id])
        // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        await conn.execute('UPDATE `users` SET `start_data` = ?, `end_data` = ? WHERE `user_id`= ?', [
            startDate,
            endDate[0].selected_date,
            ctx.from.id
        ]);

        // –æ–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

        await ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞')
    }
    catch(err) {
        await ctx.reply('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è')
        console.log(err)
    }
})

bot.on('text', async (ctx) => {
    await addUserMessage(ctx); 
});

// inline –∫–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
bot.action('add_comment', async (ctx) => {
    await UpdateStateSession(ctx, 1);
    await ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ');
});
// inline –∫–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
bot.action('add_description', async (ctx) => {
    await UpdateStateSession(ctx, 0);
    await ctx.reply('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏');
});

// —Ñ—É–Ω–∫–∏—è –ø—Ä–æ–≤–µ—Ä—è—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
async function subscribe(ctx, currentCost) {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const subInfo = await CheckSubscriptions(ctx.from.id);
    
    // –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    if (subInfo.subscription) {
        await ctx.replyWithHTML(`<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${ moment(subInfo.infoUser[0].end_data).format('DD.MM.YYYY')}`);
    } else {
        // –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–ª–∞—Ç—ã
        return ctx.replyWithInvoice(GetInvoice(ctx, Number(currentCost) - subInfo.infoUser[0].count_referal * 0.1 * Number(currentCost)));
    }   
}


// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
async function saveSelectedDate(ctx, selectedDate) {
    await conn.execute('UPDATE `users` SET `selected_date` = ? WHERE `user_id`= ?', [
        selectedDate,
        ctx.from.id
    ]);
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
bot.action('one_month', async (ctx) => { 
    const selectedDate = moment().add(1, 'months').format('YYYY-MM-DD'); // –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    saveSelectedDate(ctx, selectedDate) // –∑–∞–ø–æ–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
    subscribe(ctx, process.env.SUB_ON_MONTH) // –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
});
bot.action('three_month', async (ctx) => { 
    const selectedDate = moment().add(3, 'months').format('YYYY-MM-DD'); // –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    saveSelectedDate(ctx, selectedDate) // –∑–∞–ø–æ–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
    subscribe(ctx, process.env.SUB_ON_THREE_MONTH) // –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
});
bot.action('half_year', async (ctx) => { 
    const selectedDate = moment().add(6, 'months').format('YYYY-MM-DD'); // –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    saveSelectedDate(ctx, selectedDate) // –∑–∞–ø–æ–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
    subscribe(ctx, process.env.SUB_ON_HALF_YEAR) // –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É 
});
bot.action('one_yaer', async (ctx) => {
    const selectedDate = moment().add(12, 'months').format('YYYY-MM-DD'); // –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    saveSelectedDate(ctx, selectedDate) // –∑–∞–ø–æ–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
    subscribe(ctx, process.env.SUB_ON_YEAR) // –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
});

bot.launch();


// Set up webhook
bot.telegram.setWebhook('https://60b9-94-140-138-143.eu.ngrok.io');

// Bind to Express app
app.use(bot.webhookCallback('/'));

// Start server
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});

